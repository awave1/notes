{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/utils.js","webpack:///./src/components/PostCard.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_PostCard__WEBPACK_IMPORTED_MODULE_1__","_components_Footer__WEBPACK_IMPORTED_MODULE_2__","IndexPage","_ref","content","data","allMarkdownRemark","edges","filter","edge","node","frontmatter","date","published","map","a","createElement","key","id","post","Fragment","style","marginTop","countWords","html","match","replace","count","i","length","charCodeAt","countImages","module","exports","leKebab","str","getReadingTime","_contentCount","wordCount","imageCount","contentCount","readingTime","readingTimeSeconds","Math","max","round","estimatedReadingTime","flatten","arr","concat","apply","unique","el","array","indexOf","gatsby__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_utils_utils__WEBPACK_IMPORTED_MODULE_3__","PostTitle","styled","h3","withConfig","displayName","componentId","PostContainer","Link","props","theme","secondaryColor","card","background","CategoryLabel","span","PostCard","_post$fields","fields","slug","category","_post$frontmatter","title","description","to","marginBottom"],"mappings":"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","file":"component---src-pages-index-js-6e85772da61d4cd96d76.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport PostCard from '../components/PostCard';\nimport Footer from '../components/Footer';\nimport './css/index.css';\n\nconst IndexPage = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges },\n  } = data;\n\n  const content = edges\n    .filter(\n      edge => !!edge.node.frontmatter.date && edge.node.frontmatter.published\n    )\n    .map(edge => <PostCard key={edge.node.id} post={edge.node} />);\n\n  return (\n    <>\n      <div style={{ marginTop: 45 }}>{content}</div>\n      <Footer />\n    </>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            published\n          }\n          fields {\n            slug\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * Format string to-kebab-format\n *\n * @param {string} str\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\n\n/**\n * Word count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of words after sanitizing any html\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countWords = html => {\n  const text = html.replace(/<(.|\\n)*?>/g, ' '); // strip any HTML tags\n\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\n  const match = text.match(pattern);\n  let count = 0;\n\n  if (match === null) {\n    return count;\n  }\n\n  for (let i = 0; i < match.length; i++) {\n    if (match[i].charCodeAt(0) >= 0x4e00) {\n      count += match[i].length;\n    } else {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\n/**\n * Image count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countImages = html => (html.match(/<img(.|\\n)*?>/g) || []).length;\n\nconst contentCount = html => ({\n  wordCount: countWords(html),\n  imageCount: countImages(html),\n});\n\n/**\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\n *\n * @param {integer} wordCount\n * @param {integer} imageCount\n * @returns {integer} estimated reading time in seconds\n **/\nconst estimatedReadingTime = (wordCount, imageCount) => {\n  const wordsPerMinute = 275;\n  const wordsPerSecond = wordsPerMinute / 60;\n  let readingTimeSeconds = wordCount / wordsPerSecond;\n\n  if (imageCount) {\n    for (let i = 12; i > 12 - imageCount; i--) {\n      readingTimeSeconds += Math.max(i, 3);\n    }\n  }\n\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\n\n  return readingTimeMinutes;\n};\n\nconst getReadingTime = html => {\n  const { wordCount, imageCount } = contentCount(html);\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\n\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\n};\n\nconst flatten = arr => [].concat.apply([], arr);\n\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\n\nmodule.exports = {\n  leKebab,\n  getReadingTime,\n  flatten,\n  unique,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport { getReadingTime } from '../utils/utils';\n\nconst PostTitle = styled.h3`\n  margin-top: 0.5rem;\n  margin-bottom: 0.25rem;\n`;\n\nconst PostContainer = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  color: ${props => props.theme.secondaryColor};\n  background: ${props => props.theme.card.background};\n  box-shadow: 0px 0px 50px #0000001a;\n  border-radius: 6px;\n  padding: 1rem;\n  margin-bottom: 48px;\n  transition: all 150ms cubic-bezier(0.55, 0, 0.1, 1);\n\n  &:hover {\n    box-shadow: 0px 0px 75px #00000012;\n  }\n`;\n\nconst CategoryLabel = styled.span`\n  background: #df3131;\n  position: absolute;\n  color: white;\n  right: 15px;\n  font-size: 0.8rem;\n  top: 0;\n  padding: 3px;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 15ch;\n`;\n\nconst PostCard = ({ post }) => {\n  const {\n    html,\n    fields: { slug, category },\n    frontmatter: { title, date, description },\n  } = post;\n\n  const readingTime = getReadingTime(html);\n\n  return (\n    <PostContainer to={slug}>\n      <CategoryLabel>{category}</CategoryLabel>\n      <PostTitle>{title}</PostTitle>\n      <small>\n        {date} | {readingTime}\n      </small>\n      <p style={{ marginBottom: '0.5rem' }}>{description}</p>\n    </PostContainer>\n  );\n};\n\nexport default PostCard;\n"],"sourceRoot":""}