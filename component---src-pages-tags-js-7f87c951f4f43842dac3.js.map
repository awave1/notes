{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./src/pages/tags.js"],"names":["countWords","html","match","replace","count","i","length","charCodeAt","countImages","flatten","arr","concat","apply","unique","filter","el","array","indexOf","module","exports","leKebab","str","getReadingTime","wordCount","imageCount","contentCount","readingTime","readingTimeSeconds","Math","max","round","estimatedReadingTime","uniqueFlatten","Tag","pageQuery","TagsPage","data","group","allMarkdownRemark","title","site","siteMetadata","list","style","listStyle","margin","padding","map","tag","key","fieldValue","to","totalCount"],"mappings":"oGAQA,IAUMA,EAAa,SAAAC,GACjB,IAGMC,GAHOD,EAAOA,EAAKE,QAAQ,cAAe,KAAO,IAGpCD,MADH,oHAEZE,EAAQ,EAEZ,GAAc,OAAVF,EACF,OAAOE,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC5BH,EAAMG,GAAGE,WAAW,IAAM,MAC5BH,GAASF,EAAMG,GAAGC,OAElBF,GAAS,EAIb,OAAOA,GAWHI,EAAc,SAAAP,GAAI,OACtBA,GAAQA,EAAKC,MAAM,mBAAqB,IAAII,OAAS,GAqCjDG,EAAU,SAAAC,GAAG,MAAI,GAAGC,OAAOC,MAAM,GAAIF,IAErCG,EAAS,SAAAH,GAAG,OAAIA,EAAII,QAAO,SAACC,EAAIV,EAAGW,GAAR,OAAkBA,EAAMC,QAAQF,KAAQV,MAIzEa,EAAOC,QAAU,CACfC,QArFc,SAAAC,GAAG,OAAIA,EAAIlB,QAAQ,mBAAoB,IAAIA,QAAQ,MAAO,MAsFxEmB,eAfqB,SAAArB,GAAS,IAAD,EA5BV,SAAAA,GAAI,MAAK,CAC5BsB,UAAWvB,EAAWC,GACtBuB,WAAYhB,EAAYP,IA2BUwB,CAAaxB,GACzCyB,EAlBqB,SAACH,EAAWC,GACvC,IAEIG,EAAqBJ,GAFF,IACiB,IAGxC,GAAIC,EACF,IAAK,IAAInB,EAAI,GAAIA,EAAI,GAAKmB,EAAYnB,IACpCsB,GAAsBC,KAAKC,IAAIxB,EAAG,GAMtC,OAF2BuB,KAAKE,MAAMH,EAAqB,IAOvCI,CAFS,EACrBR,UADqB,EACVC,YAGnB,OAAOE,GAAe,EAAI,aAAkBA,EAArC,aAYPjB,UACAI,SACAmB,cAPoB,SAAAtB,GAAG,OAAIG,EAAOJ,EAAQC,O,+JCpFtCuB,EAAG,6GAwCIC,EAAS,aAgBPC,UAnDE,SAAC,GAOX,IAAD,IANJC,KACuBC,EAKnB,EALFC,kBAAqBD,MAEHE,EAGhB,EAJFC,KACEC,aAAgBF,MAIdG,EACJL,GAASA,EAAM/B,OACb,kBAAIqC,MAAO,CAAEC,UAAW,OAAQC,OAAQ,EAAGC,QAAS,IACjDT,EAAMU,KAAI,SAAAC,GAAG,OACZ,YAACf,EAAD,CAAKgB,IAAKD,EAAIE,YACZ,YAAC,OAAD,CAAMC,GAAE,SAAW/B,kBAAQ4B,EAAIE,YAAvB,KACLF,EAAIE,WADP,KACqBF,EAAII,WADzB,UAON,uBACE,kCAGN,OACE,uBACE,YAAC,SAAD,CAAQb,MAAOA,IACf,uBACE,8BACCG","file":"component---src-pages-tags-js-7f87c951f4f43842dac3.js","sourcesContent":["/**\r\n * Format string to-kebab-format\r\n *\r\n * @param {string} str\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of images\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\r\n\r\n/**\r\n * Word count utility\r\n *\r\n * @param {string} html string\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of words after sanitizing any html\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst countWords = html => {\r\n  const text = html ? html.replace(/<(.|\\n)*?>/g, ' ') : ''; // strip any HTML tags\r\n\r\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\r\n  const match = text.match(pattern);\r\n  let count = 0;\r\n\r\n  if (match === null) {\r\n    return count;\r\n  }\r\n\r\n  for (let i = 0; i < match.length; i++) {\r\n    if (match[i].charCodeAt(0) >= 0x4e00) {\r\n      count += match[i].length;\r\n    } else {\r\n      count += 1;\r\n    }\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\n/**\r\n * Image count utility\r\n *\r\n * @param {string} html string\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of images\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst countImages = html =>\r\n  html ? (html.match(/<img(.|\\n)*?>/g) || []).length : 0;\r\n\r\nconst contentCount = html => ({\r\n  wordCount: countWords(html),\r\n  imageCount: countImages(html),\r\n});\r\n\r\n/**\r\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\r\n *\r\n * @param {integer} wordCount\r\n * @param {integer} imageCount\r\n * @returns {integer} estimated reading time in seconds\r\n **/\r\nconst estimatedReadingTime = (wordCount, imageCount) => {\r\n  const wordsPerMinute = 275;\r\n  const wordsPerSecond = wordsPerMinute / 60;\r\n  let readingTimeSeconds = wordCount / wordsPerSecond;\r\n\r\n  if (imageCount) {\r\n    for (let i = 12; i > 12 - imageCount; i--) {\r\n      readingTimeSeconds += Math.max(i, 3);\r\n    }\r\n  }\r\n\r\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\r\n\r\n  return readingTimeMinutes;\r\n};\r\n\r\nconst getReadingTime = html => {\r\n  const { wordCount, imageCount } = contentCount(html);\r\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\r\n\r\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\r\n};\r\n\r\nconst flatten = arr => [].concat.apply([], arr);\r\n\r\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\r\n\r\nconst uniqueFlatten = arr => unique(flatten(arr));\r\n\r\nmodule.exports = {\r\n  leKebab,\r\n  getReadingTime,\r\n  flatten,\r\n  unique,\r\n  uniqueFlatten,\r\n};\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\nimport { Helmet } from 'react-helmet';\r\nimport styled from '@emotion/styled';\r\nimport { leKebab } from '../utils/utils';\r\n\r\nconst Tag = styled.li`\r\n  margin: 1rem 0;\r\n  font-family: 'Hack', monospace;\r\n`;\r\n\r\nconst TagsPage = ({\r\n  data: {\r\n    allMarkdownRemark: { group },\r\n    site: {\r\n      siteMetadata: { title },\r\n    },\r\n  },\r\n}) => {\r\n  const list =\r\n    group && group.length ? (\r\n      <ul style={{ listStyle: 'none', margin: 0, padding: 0 }}>\r\n        {group.map(tag => (\r\n          <Tag key={tag.fieldValue}>\r\n            <Link to={`/tags/${leKebab(tag.fieldValue)}/`}>\r\n              {tag.fieldValue} ({tag.totalCount})\r\n            </Link>\r\n          </Tag>\r\n        ))}\r\n      </ul>\r\n    ) : (\r\n      <div>\r\n        <h2>No Tags</h2>\r\n      </div>\r\n    );\r\n  return (\r\n    <div>\r\n      <Helmet title={title} />\r\n      <div>\r\n        <h3>Tags</h3>\r\n        {list}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(limit: 2000) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default TagsPage;\r\n"],"sourceRoot":""}