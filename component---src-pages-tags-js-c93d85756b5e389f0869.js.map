{"version":3,"sources":["webpack:///./src/pages/tags.js","webpack:///./src/utils/utils.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_3__","_utils_utils__WEBPACK_IMPORTED_MODULE_4__","Tag","styled","li","withConfig","displayName","componentId","TagsPage","_ref","_ref$data","data","group","allMarkdownRemark","title","site","siteMetadata","a","createElement","style","listStyle","margin","padding","map","tag","key","fieldValue","to","leKebab","totalCount","countWords","html","match","replace","count","i","length","charCodeAt","countImages","module","exports","str","getReadingTime","_contentCount","wordCount","imageCount","contentCount","readingTime","readingTimeSeconds","Math","max","round","estimatedReadingTime","flatten","arr","concat","apply","unique","filter","el","array","indexOf"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,KAMMY,EAAMC,IAAOC,GAAVC,WAAA,CAAAC,YAAA,YAAAC,YAAA,eAAGJ,CAAH,+CAgCIT,EAAS,aAgBPc,UA3CE,SAAAC,GAOX,IAAAC,EAAAD,EANJE,KACuBC,EAKnBF,EALFG,kBAAqBD,MAEHE,EAGhBJ,EAJFK,KACEC,aAAgBF,MAIpB,OACElB,EAAAqB,EAAAC,cAAA,WACEtB,EAAAqB,EAAAC,cAACnB,EAAA,OAAD,CAAQe,MAAOA,IACflB,EAAAqB,EAAAC,cAAA,WACEtB,EAAAqB,EAAAC,cAAA,kBACAtB,EAAAqB,EAAAC,cAAA,MAAIC,MAAO,CAAEC,UAAW,OAAQC,OAAQ,EAAGC,QAAS,IACjDV,EAAMW,IAAI,SAAAC,GAAG,OACZ5B,EAAAqB,EAAAC,cAAChB,EAAD,CAAKuB,IAAKD,EAAIE,YACZ9B,EAAAqB,EAAAC,cAACpB,EAAA,KAAD,CAAM6B,GAAE,SAAWC,kBAAQJ,EAAIE,YAAvB,KACLF,EAAIE,WADP,KACqBF,EAAIK,WADzB,6CCnBd,IAUMC,EAAa,SAAAC,GACjB,IAGMC,EAHOD,EAAKE,QAAQ,cAAe,KAGtBD,MADH,oHAEZE,EAAQ,EAEZ,GAAc,OAAVF,EACF,OAAOE,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC5BH,EAAMG,GAAGE,WAAW,IAAM,MAC5BH,GAASF,EAAMG,GAAGC,OAElBF,GAAS,EAIb,OAAOA,GAWHI,EAAc,SAAAP,GAAI,OAAKA,EAAKC,MAAM,mBAAqB,IAAII,QAyCjEG,EAAOC,QAAU,CACfZ,QAlFc,SAAAa,GAAG,OAAIA,EAAIR,QAAQ,mBAAoB,IAAIA,QAAQ,MAAO,MAmFxES,eAbqB,SAAAX,GAAQ,IAAAY,EA5BV,SAAAZ,GAAI,MAAK,CAC5Ba,UAAWd,EAAWC,GACtBc,WAAYP,EAAYP,IA2BUe,CAAaf,GACzCgB,EAlBqB,SAACH,EAAWC,GACvC,IAEIG,EAAqBJ,GAFF,IACiB,IAGxC,GAAIC,EACF,IAAK,IAAIV,EAAI,GAAIA,EAAI,GAAKU,EAAYV,IACpCa,GAAsBC,KAAKC,IAAIf,EAAG,GAMtC,OAF2Bc,KAAKE,MAAMH,EAAqB,IAOvCI,CAFST,EACrBC,UADqBD,EACVE,YAGnB,OAAOE,GAAe,EAAI,aAAkBA,EAArC,aAUPM,QAPc,SAAAC,GAAG,MAAI,GAAGC,OAAOC,MAAM,GAAIF,IAQzCG,OANa,SAAAH,GAAG,OAAIA,EAAII,OAAO,SAACC,EAAIxB,EAAGyB,GAAR,OAAkBA,EAAMC,QAAQF,KAAQxB","file":"component---src-pages-tags-js-c93d85756b5e389f0869.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { leKebab } from '../utils/utils';\n\nconst Tag = styled.li`\n  margin: 1rem 0;\n  font-family: Hack, monospace;\n`;\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => {\n  return (\n    <div>\n      <Helmet title={title} />\n      <div>\n        <h3>Tags</h3>\n        <ul style={{ listStyle: 'none', margin: 0, padding: 0 }}>\n          {group.map(tag => (\n            <Tag key={tag.fieldValue}>\n              <Link to={`/tags/${leKebab(tag.fieldValue)}/`}>\n                {tag.fieldValue} ({tag.totalCount})\n              </Link>\n            </Tag>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport default TagsPage;\n","/**\n * Format string to-kebab-format\n *\n * @param {string} str\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\n\n/**\n * Word count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of words after sanitizing any html\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countWords = html => {\n  const text = html.replace(/<(.|\\n)*?>/g, ' '); // strip any HTML tags\n\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\n  const match = text.match(pattern);\n  let count = 0;\n\n  if (match === null) {\n    return count;\n  }\n\n  for (let i = 0; i < match.length; i++) {\n    if (match[i].charCodeAt(0) >= 0x4e00) {\n      count += match[i].length;\n    } else {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\n/**\n * Image count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countImages = html => (html.match(/<img(.|\\n)*?>/g) || []).length;\n\nconst contentCount = html => ({\n  wordCount: countWords(html),\n  imageCount: countImages(html),\n});\n\n/**\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\n *\n * @param {integer} wordCount\n * @param {integer} imageCount\n * @returns {integer} estimated reading time in seconds\n **/\nconst estimatedReadingTime = (wordCount, imageCount) => {\n  const wordsPerMinute = 275;\n  const wordsPerSecond = wordsPerMinute / 60;\n  let readingTimeSeconds = wordCount / wordsPerSecond;\n\n  if (imageCount) {\n    for (let i = 12; i > 12 - imageCount; i--) {\n      readingTimeSeconds += Math.max(i, 3);\n    }\n  }\n\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\n\n  return readingTimeMinutes;\n};\n\nconst getReadingTime = html => {\n  const { wordCount, imageCount } = contentCount(html);\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\n\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\n};\n\nconst flatten = arr => [].concat.apply([], arr);\n\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\n\nmodule.exports = {\n  leKebab,\n  getReadingTime,\n  flatten,\n  unique,\n};\n"],"sourceRoot":""}