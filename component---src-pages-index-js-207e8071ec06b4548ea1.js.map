{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./src/components/Card.js","webpack:///./src/pages/index.js"],"names":["countWords","html","match","replace","count","i","length","charCodeAt","countImages","flatten","arr","concat","apply","unique","filter","el","array","indexOf","module","exports","leKebab","str","getReadingTime","wordCount","imageCount","contentCount","readingTime","readingTimeSeconds","Math","max","round","estimatedReadingTime","uniqueFlatten","PostTitle","PostContainer","Link","props","theme","secondaryColor","card","background","borderColor","hover","CategoryLabel","Card","post","fields","slug","category","frontmatter","title","date","description","to","style","marginBottom","IndexPage","content","allMarkdownRemark","edges","edge","node","published","map","key","id","marginTop"],"mappings":"oGAQA,IAUMA,EAAa,SAAAC,GACjB,IAGMC,GAHOD,EAAOA,EAAKE,QAAQ,cAAe,KAAO,IAGpCD,MADH,oHAEZE,EAAQ,EAEZ,GAAc,OAAVF,EACF,OAAOE,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC5BH,EAAMG,GAAGE,WAAW,IAAM,MAC5BH,GAASF,EAAMG,GAAGC,OAElBF,GAAS,EAIb,OAAOA,GAWHI,EAAc,SAAAP,GAAI,OACtBA,GAAQA,EAAKC,MAAM,mBAAqB,IAAII,OAAS,GAqCjDG,EAAU,SAAAC,GAAG,MAAI,GAAGC,OAAOC,MAAM,GAAIF,IAErCG,EAAS,SAAAH,GAAG,OAAIA,EAAII,QAAO,SAACC,EAAIV,EAAGW,GAAR,OAAkBA,EAAMC,QAAQF,KAAQV,MAIzEa,EAAOC,QAAU,CACfC,QArFc,SAAAC,GAAG,OAAIA,EAAIlB,QAAQ,mBAAoB,IAAIA,QAAQ,MAAO,MAsFxEmB,eAfqB,SAAArB,GAAS,IAAD,EA5BV,SAAAA,GAAI,MAAK,CAC5BsB,UAAWvB,EAAWC,GACtBuB,WAAYhB,EAAYP,IA2BUwB,CAAaxB,GACzCyB,EAlBqB,SAACH,EAAWC,GACvC,IAEIG,EAAqBJ,GAFF,IACiB,IAGxC,GAAIC,EACF,IAAK,IAAInB,EAAI,GAAIA,EAAI,GAAKmB,EAAYnB,IACpCsB,GAAsBC,KAAKC,IAAIxB,EAAG,GAMtC,OAF2BuB,KAAKE,MAAMH,EAAqB,IAOvCI,CAFS,EACrBR,UADqB,EACVC,YAGnB,OAAOE,GAAe,EAAI,aAAkBA,EAArC,aAYPjB,UACAI,SACAmB,cAPoB,SAAAtB,GAAG,OAAIG,EAAOJ,EAAQC,O,kGCrFtCuB,EAAS,2GAKTC,EAAgB,YAAOC,OAAP,sBAAH,+DAIR,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,iBAJb,gBAKH,SAAAF,GAAK,OAAIA,EAAMC,MAAME,KAAKC,aALvB,mCAOD,SAAAJ,GAAK,OAAIA,EAAMC,MAAME,KAAKE,cAPzB,4HAcC,SAAAL,GAAK,OAAIA,EAAMC,MAAME,KAAKG,MAAMD,cAdjC,MAkBbE,EAAa,kRAoCJC,IArBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEZ5C,EAGE4C,EAHF5C,KAFuB,EAKrB4C,EAFFC,OAAUC,EAHa,EAGbA,KAAMC,EAHO,EAGPA,SAHO,EAKrBH,EADFI,YAAeC,EAJQ,EAIRA,MAAOC,EAJC,EAIDA,KAAMC,EAJL,EAIKA,YAGxB1B,EAAcJ,yBAAerB,GAEnC,OACE,YAACiC,EAAD,CAAemB,GAAIN,GACjB,YAACJ,EAAD,KAAgBK,GAChB,YAACf,EAAD,KAAYiB,GACZ,yBACGC,EADH,MACYzB,GAEZ,iBAAG4B,MAAO,CAAEC,aAAc,WAAaH,M,yGCnB9BI,UAnCf,WAAsB,IA0BdC,EA1Ba,OAEjBC,kBAAqBC,MAyBpB7C,QACC,SAAA8C,GAAI,QAAMA,EAAKC,KAAKZ,YAAYE,MAAQS,EAAKC,KAAKZ,YAAYa,aAE/DC,KAAI,SAAAH,GAAI,OAAI,YAAC,IAAD,CAAMI,IAAKJ,EAAKC,KAAKI,GAAIpB,KAAMe,EAAKC,UAEnD,OAAO,mBAAKP,MAAO,CAAEY,UAAW,KAAOT,K","file":"component---src-pages-index-js-207e8071ec06b4548ea1.js","sourcesContent":["/**\n * Format string to-kebab-format\n *\n * @param {string} str\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\n\n/**\n * Word count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of words after sanitizing any html\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countWords = html => {\n  const text = html ? html.replace(/<(.|\\n)*?>/g, ' ') : ''; // strip any HTML tags\n\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\n  const match = text.match(pattern);\n  let count = 0;\n\n  if (match === null) {\n    return count;\n  }\n\n  for (let i = 0; i < match.length; i++) {\n    if (match[i].charCodeAt(0) >= 0x4e00) {\n      count += match[i].length;\n    } else {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\n/**\n * Image count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countImages = html =>\n  html ? (html.match(/<img(.|\\n)*?>/g) || []).length : 0;\n\nconst contentCount = html => ({\n  wordCount: countWords(html),\n  imageCount: countImages(html),\n});\n\n/**\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\n *\n * @param {integer} wordCount\n * @param {integer} imageCount\n * @returns {integer} estimated reading time in seconds\n **/\nconst estimatedReadingTime = (wordCount, imageCount) => {\n  const wordsPerMinute = 275;\n  const wordsPerSecond = wordsPerMinute / 60;\n  let readingTimeSeconds = wordCount / wordsPerSecond;\n\n  if (imageCount) {\n    for (let i = 12; i > 12 - imageCount; i--) {\n      readingTimeSeconds += Math.max(i, 3);\n    }\n  }\n\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\n\n  return readingTimeMinutes;\n};\n\nconst getReadingTime = html => {\n  const { wordCount, imageCount } = contentCount(html);\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\n\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\n};\n\nconst flatten = arr => [].concat.apply([], arr);\n\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\n\nconst uniqueFlatten = arr => unique(flatten(arr));\n\nmodule.exports = {\n  leKebab,\n  getReadingTime,\n  flatten,\n  unique,\n  uniqueFlatten,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport { getReadingTime } from '../utils/utils';\n\nconst PostTitle = styled.h3`\n  margin-top: 0.5rem;\n  margin-bottom: 0.25rem;\n`;\n\nconst PostContainer = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  color: ${props => props.theme.secondaryColor};\n  background: ${props => props.theme.card.background};\n  border: 1px solid;\n  border-color: ${props => props.theme.card.borderColor};\n  border-radius: 6px;\n  padding: 1rem;\n  margin-bottom: 48px;\n  transition: all 150ms cubic-bezier(0.55, 0, 0.1, 1);\n\n  &:hover {\n    border-color: ${props => props.theme.card.hover.borderColor};\n  }\n`;\n\nconst CategoryLabel = styled.span`\n  background: #df3131;\n  position: absolute;\n  color: white;\n  right: 15px;\n  font-size: 0.8rem;\n  top: 0;\n  padding: 3px;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 15ch;\n`;\n\nconst Card = ({ post }) => {\n  const {\n    html,\n    fields: { slug, category },\n    frontmatter: { title, date, description },\n  } = post;\n\n  const readingTime = getReadingTime(html);\n\n  return (\n    <PostContainer to={slug}>\n      <CategoryLabel>{category}</CategoryLabel>\n      <PostTitle>{title}</PostTitle>\n      <small>\n        {date} | {readingTime}\n      </small>\n      <p style={{ marginBottom: '0.5rem' }}>{description}</p>\n    </PostContainer>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Card from '../components/Card';\nimport './css/index.css';\n\nfunction IndexPage() {\n  const {\n    allMarkdownRemark: { edges },\n  } = useStaticQuery(graphql`\n    query getAllPosts {\n      allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              date(formatString: \"MMMM DD, YYYY\")\n              title\n              description\n              published\n            }\n            fields {\n              slug\n              category\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const content = edges\n    .filter(\n      edge => !!edge.node.frontmatter.date && edge.node.frontmatter.published\n    )\n    .map(edge => <Card key={edge.node.id} post={edge.node} />);\n\n  return <div style={{ marginTop: 45 }}>{content}</div>;\n}\n\nexport default IndexPage;\n"],"sourceRoot":""}