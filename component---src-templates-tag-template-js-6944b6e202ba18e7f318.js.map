{"version":3,"sources":["webpack:///./src/templates/TagTemplate.js","webpack:///./src/utils/utils.js","webpack:///./src/components/PostCard.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__","_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_3__","_components_PostCard__WEBPACK_IMPORTED_MODULE_4__","TagsTemplate","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","content","filter","edge","node","frontmatter","date","map","a","createElement","key","id","post","style","fontFamily","icon","faTags","to","countWords","html","match","replace","count","i","length","charCodeAt","countImages","module","exports","leKebab","str","getReadingTime","_contentCount","wordCount","imageCount","contentCount","readingTime","readingTimeSeconds","Math","max","round","estimatedReadingTime","flatten","arr","concat","apply","unique","el","array","indexOf","styled_components__WEBPACK_IMPORTED_MODULE_2__","_utils_utils__WEBPACK_IMPORTED_MODULE_3__","PostTitle","styled","h3","withConfig","displayName","componentId","PostContainer","Link","props","theme","secondaryColor","card","background","CategoryLabel","span","PostCard","_post$fields","fields","slug","category","_post$frontmatter","title","description","marginBottom"],"mappings":"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","file":"component---src-templates-tag-template-js-6944b6e202ba18e7f318.js","sourcesContent":["import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTags } from '@fortawesome/free-solid-svg-icons';\r\nimport PostCard from '../components/PostCard';\r\n\r\nconst TagsTemplate = ({ pageContext, data }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? '' : 's'\r\n  } tagged with `;\r\n\r\n  const content = edges\r\n    .filter(edge => !!edge.node.frontmatter.date)\r\n    .map(edge => <PostCard key={edge.node.id} post={edge.node} />);\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        {tagHeader} <span style={{ fontFamily: 'monospace' }}>\"{tag}\"</span>\r\n      </h3>\r\n      {content}\r\n      <FontAwesomeIcon icon={faTags} /> <Link to=\"/tags\">Show all tags</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            title\r\n            date\r\n            description\r\n          }\r\n          fields {\r\n            slug\r\n            category\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default TagsTemplate;\r\n","/**\r\n * Format string to-kebab-format\r\n *\r\n * @param {string} str\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of images\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\r\n\r\n/**\r\n * Word count utility\r\n *\r\n * @param {string} html string\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of words after sanitizing any html\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst countWords = html => {\r\n  const text = html.replace(/<(.|\\n)*?>/g, ' '); // strip any HTML tags\r\n\r\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\r\n  const match = text.match(pattern);\r\n  let count = 0;\r\n\r\n  if (match === null) {\r\n    return count;\r\n  }\r\n\r\n  for (let i = 0; i < match.length; i++) {\r\n    if (match[i].charCodeAt(0) >= 0x4e00) {\r\n      count += match[i].length;\r\n    } else {\r\n      count += 1;\r\n    }\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\n/**\r\n * Image count utility\r\n *\r\n * @param {string} html string\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of images\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst countImages = html => (html.match(/<img(.|\\n)*?>/g) || []).length;\r\n\r\nconst contentCount = html => ({\r\n  wordCount: countWords(html),\r\n  imageCount: countImages(html),\r\n});\r\n\r\n/**\r\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\r\n *\r\n * @param {integer} wordCount\r\n * @param {integer} imageCount\r\n * @returns {integer} estimated reading time in seconds\r\n **/\r\nconst estimatedReadingTime = (wordCount, imageCount) => {\r\n  const wordsPerMinute = 275;\r\n  const wordsPerSecond = wordsPerMinute / 60;\r\n  let readingTimeSeconds = wordCount / wordsPerSecond;\r\n\r\n  if (imageCount) {\r\n    for (let i = 12; i > 12 - imageCount; i--) {\r\n      readingTimeSeconds += Math.max(i, 3);\r\n    }\r\n  }\r\n\r\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\r\n\r\n  return readingTimeMinutes;\r\n};\r\n\r\nconst getReadingTime = html => {\r\n  const { wordCount, imageCount } = contentCount(html);\r\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\r\n\r\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\r\n};\r\n\r\nconst flatten = arr => [].concat.apply([], arr);\r\n\r\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\r\n\r\nmodule.exports = {\r\n  leKebab,\r\n  getReadingTime,\r\n  flatten,\r\n  unique,\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport styled from 'styled-components';\r\nimport { getReadingTime } from '../utils/utils';\r\n\r\nconst PostTitle = styled.h3`\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.25rem;\r\n`;\r\n\r\nconst PostContainer = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  color: ${props => props.theme.secondaryColor};\r\n  background: ${props => props.theme.card.background};\r\n  box-shadow: 0px 0px 50px #0000001a;\r\n  border-radius: 6px;\r\n  padding: 1rem;\r\n  margin-bottom: 48px;\r\n  transition: all 150ms cubic-bezier(0.55, 0, 0.1, 1);\r\n\r\n  &:hover {\r\n    box-shadow: 0px 0px 75px #00000012;\r\n  }\r\n`;\r\n\r\nconst CategoryLabel = styled.span`\r\n  background: #df3131;\r\n  position: absolute;\r\n  color: white;\r\n  right: 15px;\r\n  font-size: 0.8rem;\r\n  top: 0;\r\n  padding: 3px;\r\n  border-bottom-left-radius: 5px;\r\n  border-bottom-right-radius: 5px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  max-width: 15ch;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n  const {\r\n    html,\r\n    fields: { slug, category },\r\n    frontmatter: { title, date, description },\r\n  } = post;\r\n\r\n  const readingTime = getReadingTime(html);\r\n\r\n  return (\r\n    <PostContainer to={slug}>\r\n      <CategoryLabel>{category}</CategoryLabel>\r\n      <PostTitle>{title}</PostTitle>\r\n      <small>\r\n        {date} | {readingTime}\r\n      </small>\r\n      <p style={{ marginBottom: '0.5rem' }}>{description}</p>\r\n    </PostContainer>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"],"sourceRoot":""}