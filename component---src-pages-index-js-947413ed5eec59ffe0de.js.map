{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/utils.js","webpack:///./src/components/PostCard.js"],"names":["IndexPage","content","data","allMarkdownRemark","edges","filter","edge","node","frontmatter","date","published","map","key","id","post","style","marginTop","pageQuery","countWords","html","match","replace","count","i","length","charCodeAt","countImages","module","exports","leKebab","str","getReadingTime","wordCount","imageCount","contentCount","readingTime","readingTimeSeconds","Math","max","round","estimatedReadingTime","flatten","arr","concat","apply","unique","el","array","indexOf","PostTitle","styled","h3","PostContainer","Link","props","theme","secondaryColor","card","background","CategoryLabel","span","PostCard","fields","slug","category","title","description","to","marginBottom"],"mappings":"0FAAA,qFAuBeA,UAlBG,SAAC,GAAc,IAKzBC,EALwB,EAAXC,KAEjBC,kBAAqBC,MAIpBC,QACC,SAAAC,GAAI,QAAMA,EAAKC,KAAKC,YAAYC,MAAQH,EAAKC,KAAKC,YAAYE,aAE/DC,KAAI,SAAAL,GAAI,OAAI,kBAAC,IAAD,CAAUM,IAAKN,EAAKC,KAAKM,GAAIC,KAAMR,EAAKC,UAEvD,OACE,oCACE,yBAAKQ,MAAO,CAAEC,UAAW,KAAOf,KAO/B,IAAMgB,EAAS,c,gCCjBtB,IAUMC,EAAa,SAAAC,GACjB,IAGMC,GAHOD,EAAOA,EAAKE,QAAQ,cAAe,KAAO,IAGpCD,MADH,oHAEZE,EAAQ,EAEZ,GAAc,OAAVF,EACF,OAAOE,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC5BH,EAAMG,GAAGE,WAAW,IAAM,MAC5BH,GAASF,EAAMG,GAAGC,OAElBF,GAAS,EAIb,OAAOA,GAWHI,EAAc,SAAAP,GAAI,OAAIA,GAAQA,EAAKC,MAAM,mBAAqB,IAAII,OAAS,GAyCjFG,EAAOC,QAAU,CACfC,QAlFc,SAAAC,GAAG,OAAIA,EAAIT,QAAQ,mBAAoB,IAAIA,QAAQ,MAAO,MAmFxEU,eAbqB,SAAAZ,GAAS,IAAD,EA5BV,SAAAA,GAAI,MAAK,CAC5Ba,UAAWd,EAAWC,GACtBc,WAAYP,EAAYP,IA2BUe,CAAaf,GACzCgB,EAlBqB,SAACH,EAAWC,GACvC,IAEIG,EAAqBJ,GAFF,IACiB,IAGxC,GAAIC,EACF,IAAK,IAAIV,EAAI,GAAIA,EAAI,GAAKU,EAAYV,IACpCa,GAAsBC,KAAKC,IAAIf,EAAG,GAMtC,OAF2Bc,KAAKE,MAAMH,EAAqB,IAOvCI,CAFS,EACrBR,UADqB,EACVC,YAGnB,OAAOE,GAAe,EAAI,aAAkBA,EAArC,aAUPM,QAPc,SAAAC,GAAG,MAAI,GAAGC,OAAOC,MAAM,GAAIF,IAQzCG,OANa,SAAAH,GAAG,OAAIA,EAAIrC,QAAO,SAACyC,EAAIvB,EAAGwB,GAAR,OAAkBA,EAAMC,QAAQF,KAAQvB,Q,iCCvFzE,6CAKM0B,EAAYC,IAAOC,GAAV,0EAAGD,CAAH,8CAKTE,EAAgBF,YAAOG,QAAV,8EAAGH,CAAH,mQAIR,SAAAI,GAAK,OAAIA,EAAMC,MAAMC,kBAChB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,KAAKC,cAYpCC,EAAgBT,IAAOU,KAAV,8EAAGV,CAAH,oNAoCJW,IArBE,SAAC,GAAc,IAAZ/C,EAAW,EAAXA,KAEhBK,EAGEL,EAHFK,KAF2B,EAKzBL,EAFFgD,OAAUC,EAHiB,EAGjBA,KAAMC,EAHW,EAGXA,SAHW,EAKzBlD,EADFN,YAAeyD,EAJY,EAIZA,MAAOxD,EAJK,EAILA,KAAMyD,EAJD,EAICA,YAGxB/B,EAAcJ,yBAAeZ,GAEnC,OACE,kBAACiC,EAAD,CAAee,GAAIJ,GACjB,kBAACJ,EAAD,KAAgBK,GAChB,kBAACf,EAAD,KAAYgB,GACZ,+BACGxD,EADH,MACY0B,GAEZ,uBAAGpB,MAAO,CAAEqD,aAAc,WAAaF","file":"component---src-pages-index-js-947413ed5eec59ffe0de.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport PostCard from '../components/PostCard';\nimport './css/index.css';\n\nconst IndexPage = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges },\n  } = data;\n\n  const content = edges\n    .filter(\n      edge => !!edge.node.frontmatter.date && edge.node.frontmatter.published\n    )\n    .map(edge => <PostCard key={edge.node.id} post={edge.node} />);\n\n  return (\n    <>\n      <div style={{ marginTop: 45 }}>{content}</div>\n    </>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            published\n          }\n          fields {\n            slug\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * Format string to-kebab-format\n *\n * @param {string} str\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\n\n/**\n * Word count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of words after sanitizing any html\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countWords = html => {\n  const text = html ? html.replace(/<(.|\\n)*?>/g, ' ') : ''; // strip any HTML tags\n\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\n  const match = text.match(pattern);\n  let count = 0;\n\n  if (match === null) {\n    return count;\n  }\n\n  for (let i = 0; i < match.length; i++) {\n    if (match[i].charCodeAt(0) >= 0x4e00) {\n      count += match[i].length;\n    } else {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\n/**\n * Image count utility\n *\n * @param {string} html string\n * @returns {integer} word count\n * @description Takes a html string and returns the number of images\n * Note: This code is taken from @tryghost/helpers package\n **/\nconst countImages = html => html ? (html.match(/<img(.|\\n)*?>/g) || []).length : 0;\n\nconst contentCount = html => ({\n  wordCount: countWords(html),\n  imageCount: countImages(html),\n});\n\n/**\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\n *\n * @param {integer} wordCount\n * @param {integer} imageCount\n * @returns {integer} estimated reading time in seconds\n **/\nconst estimatedReadingTime = (wordCount, imageCount) => {\n  const wordsPerMinute = 275;\n  const wordsPerSecond = wordsPerMinute / 60;\n  let readingTimeSeconds = wordCount / wordsPerSecond;\n\n  if (imageCount) {\n    for (let i = 12; i > 12 - imageCount; i--) {\n      readingTimeSeconds += Math.max(i, 3);\n    }\n  }\n\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\n\n  return readingTimeMinutes;\n};\n\nconst getReadingTime = html => {\n  const { wordCount, imageCount } = contentCount(html);\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\n\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\n};\n\nconst flatten = arr => [].concat.apply([], arr);\n\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\n\nmodule.exports = {\n  leKebab,\n  getReadingTime,\n  flatten,\n  unique,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport { getReadingTime } from '../utils/utils';\n\nconst PostTitle = styled.h3`\n  margin-top: 0.5rem;\n  margin-bottom: 0.25rem;\n`;\n\nconst PostContainer = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  color: ${props => props.theme.secondaryColor};\n  background: ${props => props.theme.card.background};\n  box-shadow: 0px 0px 50px #0000001a;\n  border-radius: 6px;\n  padding: 1rem;\n  margin-bottom: 48px;\n  transition: all 150ms cubic-bezier(0.55, 0, 0.1, 1);\n\n  &:hover {\n    box-shadow: 0px 0px 75px #00000012;\n  }\n`;\n\nconst CategoryLabel = styled.span`\n  background: #df3131;\n  position: absolute;\n  color: white;\n  right: 15px;\n  font-size: 0.8rem;\n  top: 0;\n  padding: 3px;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 15ch;\n`;\n\nconst PostCard = ({ post }) => {\n  const {\n    html,\n    fields: { slug, category },\n    frontmatter: { title, date, description },\n  } = post;\n\n  const readingTime = getReadingTime(html);\n\n  return (\n    <PostContainer to={slug}>\n      <CategoryLabel>{category}</CategoryLabel>\n      <PostTitle>{title}</PostTitle>\n      <small>\n        {date} | {readingTime}\n      </small>\n      <p style={{ marginBottom: '0.5rem' }}>{description}</p>\n    </PostContainer>\n  );\n};\n\nexport default PostCard;\n"],"sourceRoot":""}