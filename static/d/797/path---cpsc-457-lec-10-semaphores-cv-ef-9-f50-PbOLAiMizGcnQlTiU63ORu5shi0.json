{"data":{"markdownRemark":{"html":"<h2>Condition Variables</h2>\n<p>Condition variables are another type of synchronization primitives. They're used together with mutexes.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Where the condition can only become true if another thread runs it's critical section. A common pattern of using CVs:</p>\n<ul>\n<li>a thread enters it's critical section (locks a mutex)</li>\n<li>inside CS, thread needs to wait for some condition to become true</li>\n<li>but the condition can only become true by allowing some other thread to lock the mutex</li>\n<li>the thread has to wait and release the mutex</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>cv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>now some other thread can lock the mutex and execute code that will satisfy the condition</li>\n</ul>\n<p>Eventually, the other thread:</p>\n<ul>\n<li>locks the mutex (optional)</li>\n<li>changes some state that will satisfy the condition</li>\n<li>notifies the waiting thread via condition variable</li>\n<li>releases the mutex (optional)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  condition <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>cv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Semaphore</h2>\n<p>A special integer variable used for signalling. The value could indicate number of available units of some resource.</p>","frontmatter":{"date":"February 14, 2019","title":"More Synchronization Mechanisms","tags":["cpsc457"]}}},"pageContext":{"prev":{"fields":{"slug":"/cpsc457/lec9-mutexes-locks-dining-philosophers"},"frontmatter":{"published":true,"tags":["cpsc457","multithreading","concurrency"]}},"slug":"/cpsc457/lec10-semaphores-cv","next":{"fields":{"slug":"/cpsc457/lec11-more-synchronization"},"frontmatter":{"published":true,"tags":["cpsc457"]}},"category":"cpsc457"}}