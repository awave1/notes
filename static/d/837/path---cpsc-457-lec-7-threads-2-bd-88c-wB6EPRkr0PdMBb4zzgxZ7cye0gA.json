{"data":{"markdownRemark":{"html":"<p>In many ways threads are similar to processes. Both can be used to write applications that need some parallelism. However, min differences are: threads are more efficient, threads are more complicated to program correctly.</p>\n<p>Informally, a thread is \"a process within a process\", or \"mini process\". A process can have multiple threads, and a thread is always associated with a process. All threads within one process share the resources of the process. A process is like a container for all its threads. All threads are scheduled independently.</p>\n<h2>Process vs Thread</h2>\n<p>Both processes and threads can be used to write concurrent applications, but there are important differences</p>\n<ul>\n<li>processes are independent and self contained</li>\n<li>threads exists as a subset of process</li>\n<li>threads belonging to the same process share many/most resources with each other</li>\n<li>processes interact only through OS mechanisms (IPC = interprocess communication)</li>\n<li>threads have more options for communication</li>\n<li>processes have easier access to built-in OS mechanisms, but they are usually less efficient than threads</li>\n</ul>\n<p><strong>Per-process items</strong>:</p>\n<ul>\n<li>address space</li>\n<li>global variables</li>\n<li>heap</li>\n<li>open files</li>\n<li>child processes</li>\n<li>signals</li>\n</ul>\n<p><strong>Per-thread items</strong>:</p>\n<ul>\n<li>registers</li>\n<li>PC</li>\n<li>stack</li>\n<li>state</li>\n</ul>\n<h2>Common thread scenarios</h2>\n<ul>\n<li>\n<p><strong>pipeline</strong></p>\n<ul>\n<li>a task is broken into a series of stages</li>\n<li>each stage handled by a different thread</li>\n</ul>\n</li>\n<li>\n<p><strong>manager/worker</strong></p>\n<ul>\n<li>one manager thread assigns work to worker threads</li>\n<li>manager thread handles all I/O</li>\n<li>worker threads can be static or dynamic</li>\n</ul>\n</li>\n<li>\n<p><strong>peer</strong></p>\n<ul>\n<li>all threads work on the same or different tasks in parallel</li>\n</ul>\n</li>\n</ul>\n<h3>Why Threads?</h3>\n<ul>\n<li>multithreaded applications can run faster on computers with multiple cores/CPUs</li>\n<li>multiple threads can parallelize access to hardware e.g. 2 threads reading different files</li>\n</ul>\n<h3>Thread pool</h3>\n<p><strong>Thread pool</strong> is a software design pattern. Program creates and maintained a pool of worker threads. Pool size can be tuned, e.g. to the available computing resources. When program needs a thread, it takes one out of the pool.</p>\n<p>Thread queues are often combined with a <strong>task queue</strong>. Instead of asking for a thread, a 'task' is inserted into a task queue. Available threads in the thread pool take tasks from the task queue and finish them.</p>\n<h3>Thread libraries</h3>\n<ul>\n<li>POSIX threads</li>\n<li>Win32</li>\n<li>Java</li>\n</ul>\n<h4>POSIX threads (aka pthreads)</h4>\n<p>To use POSIX threads:</p>\n<ul>\n<li><code class=\"language-text\">#include &lt;pthread.h&gt;</code></li>\n<li>compile with <code class=\"language-text\">gcc -lpthread</code></li>\n</ul>\n<p>pthread functions:</p>\n<ul>\n<li><code class=\"language-text\">pthread_create(thread, attr, start_routine, arg)</code> starts a thread, similar to <code class=\"language-text\">fork()</code></li>\n<li><code class=\"language-text\">pthread_exit(status)</code> terminates the current thread, similar to <code class=\"language-text\">exit()</code> or you can return from <code class=\"language-text\">start_routine</code></li>\n<li><code class=\"language-text\">pthread_join(thread, *status)</code> blocks the main, calling, thread until the specified thread terminates, similar to <code class=\"language-text\">wait()</code></li>\n<li>\n<p><code class=\"language-text\">pthread_attr_init(attr)</code> and <code class=\"language-text\">pthread_attr_destroy(attr)</code></p>\n<ul>\n<li>initializes/destroys thread attributes</li>\n<li>these can be tuned with <code class=\"language-text\">pthread_attr_set*()</code> functions</li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"February 05, 2019","title":"Threads","tags":["cpsc457"]}}},"pageContext":{"prev":{"fields":{"slug":"/cpsc413/lec2-algorithm-analysis"},"frontmatter":{"published":true,"tags":["cpsc413"]}},"slug":"/cpsc457/lec7-threads","next":{"fields":{"slug":"/cpsc457/lec8-concurrent-programming"},"frontmatter":{"published":true,"tags":["cpsc457"]}},"category":"cpsc457"}}