{"data":{"markdownRemark":{"html":"<p><strong>Objective</strong></p>\n<ol>\n<li>Understand the components of the Entity-Relationship (ER) model</li>\n<li>Draw ER diagrams (ERDs)</li>\n<li>Create data models using ERDs</li>\n<li>Use Object-Oriented enhancements with ERDs</li>\n<li>Create data models using Enhanced ERDs (EERDs)</li>\n</ol>\n<h2>Methodologies for Coneptual Design</h2>\n<p>Entety relationship diagram is the most used data modeling tool.</p>\n<ul>\n<li>Entity Relationship diagrams</li>\n<li>Enhanced Entity Relationship (EER) Diagrams</li>\n<li>Use of design tools in industry for designing and documenting large scale designs</li>\n<li>The UML Class diagram diagrams are popular in industry to document conceptual database designs</li>\n</ul>\n<h2>Entity Relationship Diagrams</h2>\n<h4>Example <code class=\"language-text\">COMPANY</code> Database</h4>\n<p>We need to create a database schema design based on the following (simplified) <strong>requirements</strong> of the <code class=\"language-text\">COMPANY</code> Database:</p>\n<ul>\n<li>The company is organized into <code class=\"language-text\">DEPARTMENTs</code>. Each department has a name, number and a employee who <strong>manages</strong> the department. We keep track of the start date of the department manager. A department may have several locations</li>\n<li>Each department <strong>controls</strong> a number of <code class=\"language-text\">PROJECTs</code>. Each project has a unique name, number, and is located at a single location</li>\n<li>\n<p>The database will store each <code class=\"language-text\">EMPLOYEE</code>'s SSN, number, address, salary, sex, and birthdate</p>\n<ul>\n<li>Each employee <strong>works for</strong> one department but may <strong>work on</strong> several projects</li>\n<li>The DB will keep track of the number of hours per week that an employee currently works on each project</li>\n<li>It is required to keep rack of the <strong>direct supervisor</strong> of each employee</li>\n</ul>\n</li>\n<li>\n<p>Each employee may <strong>have a number</strong> of <code class=\"language-text\">DEPENDENTs</code></p>\n<ul>\n<li>For each dependent, the DB keeps a record of name, sec, birthdate, and relationship to the employee</li>\n</ul>\n</li>\n</ul>\n<h2>ER Model Concepts</h2>\n<p><strong>Entities</strong> are the objects for which you need to keep information in database. The <code class=\"language-text\">EMPLOYEE</code> John Smith, the Research Department <code class=\"language-text\">DEPARTMENT</code>, the ProductX <code class=\"language-text\">PROJECT</code></p>\n<p><strong>Attributes</strong> are properties used to describe an entity. An <code class=\"language-text\">EMPLOYEE</code> entity may have the attributes such as name, ssn, address, etc.</p>\n<p>A specific entity will have a value for each of its attributes. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> entity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">,</span>\n  ssn<span class=\"token punctuation\">:</span> <span class=\"token string\">'123456789'</span><span class=\"token punctuation\">,</span>\n  address<span class=\"token punctuation\">:</span> <span class=\"token string\">'123, street'</span><span class=\"token punctuation\">,</span>\n  sex<span class=\"token punctuation\">:</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span>\n  bday<span class=\"token punctuation\">:</span> <span class=\"token string\">'09-jan-55'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Each attribute has a <strong>value set</strong> (or data type) associated with it e.g integer, string, date, etc.</p>\n<h3>Types of Attributes</h3>\n<p>Can be either <strong>simple</strong> or <strong>composite</strong></p>\n<p><strong>Simple</strong>: each entity has a single atomic value for the attribute. For example ssn, or sex.</p>\n<p><strong>Composite</strong>: the attribute may be composed of several components. For example name (first, middle, last). Composition may form a hierarchy where some components are themselves composite.</p>\n<h4>Example of a Composite Attribute</h4>\n<p><img src=\"cpsc471/img/lec02/01.png\" alt=\"Composite Attribute\"></p>\n<p><strong>Multi-valued</strong>: an entity may have multiple values for that attribute. For example, color of a <code class=\"language-text\">CAR</code> or <code class=\"language-text\">PreviousDegrees</code> of a <code class=\"language-text\">STUDENT</code>. Denoted as <code class=\"language-text\">{Color}</code> or <code class=\"language-text\">{PreviousDegrees}</code></p>\n<p>In general, composite and multi-valued attributes may be nested arbitrarily to any number of levels, although this is rare.</p>\n<h4>Types of attributes</h4>\n<p><code class=\"language-text\">PreviousDegrees</code> of a <code class=\"language-text\">STUDENT</code> is a composite multi-valued attribute denoted by <code class=\"language-text\">{PreviousDegrees(College, Year, Degree, Fiels)}</code>.</p>\n<ul>\n<li>Multiple <code class=\"language-text\">PreviousDegrees</code> values can exist</li>\n<li>Each has four subcomponent attributes: College, Year, Degree, Field</li>\n</ul>\n<h3>Entity Types and Key Attributes</h3>\n<p>Entities with the same basic attributes are grouped or typed into an <strong>entity type</strong>. For example the entity type <code class=\"language-text\">EMPLOYEE</code> and <code class=\"language-text\">PROJECT</code>.</p>\n<p>An attribute of an entity type for which each entity must have a unique value is called a <em>key attribute</em> of the type. For example <code class=\"language-text\">SSN</code> of <code class=\"language-text\">EMPLOYEE</code>.</p>\n<p>A key attribute may be composite.</p>\n<ul>\n<li><code class=\"language-text\">VehicleTagNumber</code> is a key of the <code class=\"language-text\">CAR</code> entity type with components <code class=\"language-text\">(Number, State)</code>.</li>\n<li>\n<p>An entity type may have more than one key</p>\n<ul>\n<li>The <code class=\"language-text\">CAR</code> entity type may have two keys:</li>\n<li><code class=\"language-text\">VehicleIdentificationNumber VIN</code></li>\n<li><code class=\"language-text\">VehicleTagNumber (Number, State)</code>, aka license plate</li>\n</ul>\n</li>\n</ul>\n<h3>Entity Set</h3>\n<p>Each entity type will have a collection of entities stored in the database. Called <strong>entity set</strong> or sometimes <strong>entity collection</strong>.</p>\n<p>Entity set is the current <strong>state</strong> of the entities of that type that are stored in the database.</p>\n<h4>Value Sets (Domains) of Attributes</h4>\n<p>Each simple attribute is associated with a value set</p>\n<ul>\n<li>E.g lastname has a value which is a characted string up to 15 chars</li>\n<li>Date has a value consisting of MM-DD-YYYY where each letter is an int</li>\n</ul>\n<p>A <strong>value set</strong> specifies the set of values associated with an attribute</p>\n<h4>Attributes and Value Sets</h4>\n<p>Value sets are similar to data types in most programing languages - int, char (n), etc. Mathematically, an attribute A for an entity type E whose value set is V is defined as a function:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>:</mo><mi>E</mi><mo>→</mo><mi>P</mi><mo>(</mo><mi>V</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">A: E \\to P(V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span></span>","frontmatter":{"date":"December 26, 2018","path":"/cpsc101/w1/lecture2","title":"Entity Relationship Model"}}},"pageContext":{}}