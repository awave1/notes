{"componentChunkName":"component---src-templates-tag-template-js","path":"/tags/cpsc525","webpackCompilationHash":"52c8b951f0d53a7a89fe","result":{"data":{"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"id":"edaa5548-40ed-52fe-b829-224e4147f202","html":"<h2>Manipulating execution flow</h2>\n<!-- ```c\nvoid foo(char *str) {\n  char buffer[4];\n  strcpy(buffer, str);\n}\nvoid main() {\n  char str[128];\n  int i;\n  for (i = 0; i < 128; ++i)\n    str[i] = 'a';\n  foo(str);\n}\n``` -->\n<p><strong>Attacker's goal</strong>: exploit a buffer overflow fault to overwrite return address on stack. When function call returns, <strong>control will be directed to instruction of attacker's choosing</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// overflow2.c</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> buffer <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// address of `buffer` on the stack + 24</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// pointer, follow the pointer</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>\"Smashing the Stack\"</h2>\n<p>The process of manipulating the flow of execution is sometimes called \"stack smashing\".</p>\n<ol>\n<li>Find buffer overflow flaw</li>\n<li>smash the stack</li>\n<li>Spawn a shell == run arbitrary commands</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Spawning a shell</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Principles of Computer Security","date":"2019-09-16","description":""},"fields":{"slug":"/cpsc525/lec4","category":"cpsc525"}}},{"node":{"id":"13e8aed5-4e46-5097-a8d3-859378c5de43","html":"<h2>Security Triad</h2>\n<p>A computing system is secure only if it exhibits all three of these properties.</p>\n<ol>\n<li>Confidentiality - access to systems or data should be limited to \"authorized parties\".</li>\n<li>Integrity - Data should neither be intentionally tampered with nor accidentally corrupted.</li>\n<li>Availability - The system or data should always be there when you need (or want) it.</li>\n</ol>\n<h3>Security vs Reliability</h3>\n<p>Security has a lot to do with reliability. A secure system is one you can rely on to, e.g.,</p>\n<ul>\n<li>Keep your personal data confidential</li>\n<li>Allow only authorized access / modifications to resources.</li>\n<li>Give correct &#x26; meaningful results; and</li>\n<li>Give correct &#x26; meaningful results when you want them</li>\n</ul>\n<h2>Privacy</h2>\n<p><strong>What is privacy?</strong> Privacy is \"infomational self-determination\" (you get to control information about you). Control could mean many different things, e.g.,</p>\n<ul>\n<li>who gets to <em>see</em> is;</li>\n<li>who gets to <em>use</em> it;</li>\n<li>what they can use it for;</li>\n<li>who can they share it with...</li>\n</ul>\n<h3>PIPEDA</h3>\n<p>PIPEDA is Canada's private-sector privacy law. PIPEDA - <strong>P</strong>ersonal <strong>I</strong>nformation <strong>P</strong>rotection and <strong>E</strong>lectronic <strong>D</strong>ocuments <strong>A</strong>ct. Ten \"principles\":</p>\n<ol>\n<li>Identify purpose of data collection</li>\n<li>Obtain consent</li>\n<li>Limit collection</li>\n<li>Limit use, disclosure and retention</li>\n<li>Use appropriate safeguards</li>\n<li>Give individual access</li>\n<li>Be accurate</li>\n<li>Be open</li>\n<li>Be accountable</li>\n<li>Provide recourse</li>\n</ol>\n<h4>Security vs Privacy</h4>\n<p>Treating security and privacy as opposites is <strong>wrong</strong>.</p>\n<h2>How secure must it be?</h2>\n<p>Principle of <strong>Easiest Penetration</strong>:</p>\n<ul>\n<li>An attacker must be expected to use any available means of penetration.</li>\n<li>Attackers will go after the <strong>weakest link</strong>, not the <strong>most obvious link</strong> nor the most convinient link to fortify.</li>\n</ul>\n<p>Given that the attacker won't attack the obvious things, we must learn how to <strong>think like an attacker</strong> and protect weak links.</p>\n<p>Principle of <strong>Adequate Protection</strong>:</p>\n<ul>\n<li>Security <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span></span></span></span> Economics: Digital assets should be protected to a degree consistent with their value and only until they lose their value.</li>\n</ul>","frontmatter":{"title":"Principles of Computer Security","date":"2019-09-09","description":""},"fields":{"slug":"/cpsc525/lec1","category":"cpsc525"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"cpsc525"}}}