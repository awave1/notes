{"componentChunkName":"component---src-templates-tag-template-js","path":"/tags/cpsc525","webpackCompilationHash":"ce48a05d4e4a4a75706d","result":{"data":{"allMarkdownRemark":{"totalCount":5,"edges":[{"node":{"id":"3a0c1cee-b98e-5b40-a126-2fba52c74009","html":"<h2>Format String Vulnerabilities</h2>\n<p><code class=\"language-text\">printf</code> has no idea how many arguments was passed to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Stackframe for the printf(&quot;%s&quot;, &quot;hello&quot;, &quot;world&quot;);\n\n--------------\npointer to &quot;world&quot;\n--------------\npointer to &quot;hello&quot;\n--------------\npointer to &quot;%s&quot;\n--------------\nreturn address\n--------------\nframe pointer\n--------------\nlocal vars\n--------------</code></pre></div>\n<p>Assume a stack frame for <code class=\"language-text\">main()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--------------        main(argc, argv)\nargv\n--------------\nargc\n--------------\nreturn address\n--------------\nframe pointer\n--------------\nrandom canary\n--------------\nterminator canary\n--------------         printf(...)\nint\n--------------\npointer to &quot;%d%p&quot;      // will print the address of terminator canary\n                       // changing it to &quot;%d%p%p&quot; will print random canary\n--------------</code></pre></div>","frontmatter":{"title":"","date":"2019-09-23","description":""},"fields":{"slug":"/cpsc525/lec7","category":"cpsc525"}}},{"node":{"id":"2c79ad8a-5b04-5317-8316-710cbfaf6d2e","html":"<!--Content-->","frontmatter":{"title":"","date":"2019-09-20","description":""},"fields":{"slug":"/cpsc525/lec5","category":"cpsc525"}}},{"node":{"id":"d29f0e24-3ba1-5f08-831b-7d1ce45353c7","html":"<h2><code class=\"language-text\">gcc</code> Stack Protection</h2>\n<p><code class=\"language-text\">gcc</code> performs runtime tests for stack integrity. Embed canaries in stack frames and verify their integrity prior to function return</p>\n<h3>Stack Ornithology: Canaries types</h3>\n<p>Three common species of stack canary:</p>\n<ul>\n<li><strong>Random canaries</strong>: random string chosen at program launch</li>\n<li><strong>Terminator canaries</strong>: a string terminator (e.g. <code class=\"language-text\">\\0</code>)</li>\n<li><strong>Random XOR canaries</strong>: random canary XORed with some function of the control data (return address, frame pointer, etc)</li>\n</ul>\n<!--\n#TODO: Finish GS cookie stuff\n-->","frontmatter":{"title":"Stack Protection: Continued","date":"2019-09-20","description":""},"fields":{"slug":"/cpsc525/lec6","category":"cpsc525"}}},{"node":{"id":"edaa5548-40ed-52fe-b829-224e4147f202","html":"<h2>Manipulating execution flow</h2>\n<!-- ```c\nvoid foo(char *str) {\n  char buffer[4];\n  strcpy(buffer, str);\n}\nvoid main() {\n  char str[128];\n  int i;\n  for (i = 0; i < 128; ++i)\n    str[i] = 'a';\n  foo(str);\n}\n``` -->\n<p><strong>Attacker's goal</strong>: exploit a buffer overflow fault to overwrite return address on stack. When function call returns, <strong>control will be directed to instruction of attacker's choosing</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// overflow2.c</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> buffer <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// address of `buffer` on the stack + 24</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// pointer, follow the pointer</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>\"Smashing the Stack\"</h2>\n<p>The process of manipulating the flow of execution is sometimes called \"stack smashing\".</p>\n<ol>\n<li>Find buffer overflow flaw</li>\n<li>smash the stack</li>\n<li>Spawn a shell == run arbitrary commands</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Spawning a shell</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Exploiting a real program</h2>\n<p>It's trivial to execute the above attack if we control the source code. However, if we don't control the source code, how do we find the return address on the stack? (which is dependent and based on CPU, OS, compiler flags, etc.)</p>\n<ul>\n<li>\n<p>Where do we locate code to spawn a shell?</p>\n<ul>\n<li>write it into a buffer we're overflowing</li>\n<li>exploit it to an environment variable</li>\n<li>pass it to the program via <code class=\"language-text\">argv</code></li>\n</ul>\n</li>\n<li>\n<p>How do we find the return address on the stack?</p>\n<ul>\n<li>trial and error</li>\n<li>debugger / disassembler</li>\n<li>repeat return address many times, hope for the best</li>\n</ul>\n</li>\n</ul>\n<h3>NOPs</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add 1 to i; discard result</span>\n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// NULL statement</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// empty block</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// NOP 100 times</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOP 100 times</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cannonical NOP in C</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nop <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x90\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x86 NOP</span></code></pre></div>\n<p>If we don't know the exact address of shellcode, we can use <strong>NOP sled</strong>; that is, pad the start of the shellcode with a bunch of NOPs. If we return to <em>any</em> address in the sequesce of NOPs, execution flow will slide into the shellcode.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> pwd<span class=\"token punctuation\">[</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"passw0rd\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"match\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Off-by-one faults</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">v</code></pre></div>\n<p>The frame pointer overwrite (paper)</p>\n<h2>Exploiting buffer overflows in the wild</h2>\n<p>How do you find buffer overflows? Only if it's available, examine the source code. Otherwise, disassemble binary, perform fuzz testing. When fuzz testing:</p>\n<ul>\n<li>send malformed inputs (e.g. ending in unexpected characters, like <code class=\"language-text\">&quot;$$$$&quot;</code>)</li>\n<li>wait for program to crash</li>\n<li>search core dump for input characters (<code class=\"language-text\">&quot;$$$$&quot;</code>).</li>\n</ul>","frontmatter":{"title":"Principles of Computer Security","date":"2019-09-16","description":""},"fields":{"slug":"/cpsc525/lec4","category":"cpsc525"}}},{"node":{"id":"13e8aed5-4e46-5097-a8d3-859378c5de43","html":"<h2>Security Triad</h2>\n<p>A computing system is secure only if it exhibits all three of these properties.</p>\n<ol>\n<li>Confidentiality - access to systems or data should be limited to \"authorized parties\".</li>\n<li>Integrity - Data should neither be intentionally tampered with nor accidentally corrupted.</li>\n<li>Availability - The system or data should always be there when you need (or want) it.</li>\n</ol>\n<h3>Security vs Reliability</h3>\n<p>Security has a lot to do with reliability. A secure system is one you can rely on to, e.g.,</p>\n<ul>\n<li>Keep your personal data confidential</li>\n<li>Allow only authorized access / modifications to resources.</li>\n<li>Give correct &#x26; meaningful results; and</li>\n<li>Give correct &#x26; meaningful results when you want them</li>\n</ul>\n<h2>Privacy</h2>\n<p><strong>What is privacy?</strong> Privacy is \"infomational self-determination\" (you get to control information about you). Control could mean many different things, e.g.,</p>\n<ul>\n<li>who gets to <em>see</em> is;</li>\n<li>who gets to <em>use</em> it;</li>\n<li>what they can use it for;</li>\n<li>who can they share it with...</li>\n</ul>\n<h3>PIPEDA</h3>\n<p>PIPEDA is Canada's private-sector privacy law. PIPEDA - <strong>P</strong>ersonal <strong>I</strong>nformation <strong>P</strong>rotection and <strong>E</strong>lectronic <strong>D</strong>ocuments <strong>A</strong>ct. Ten \"principles\":</p>\n<ol>\n<li>Identify purpose of data collection</li>\n<li>Obtain consent</li>\n<li>Limit collection</li>\n<li>Limit use, disclosure and retention</li>\n<li>Use appropriate safeguards</li>\n<li>Give individual access</li>\n<li>Be accurate</li>\n<li>Be open</li>\n<li>Be accountable</li>\n<li>Provide recourse</li>\n</ol>\n<h4>Security vs Privacy</h4>\n<p>Treating security and privacy as opposites is <strong>wrong</strong>.</p>\n<h2>How secure must it be?</h2>\n<p>Principle of <strong>Easiest Penetration</strong>:</p>\n<ul>\n<li>An attacker must be expected to use any available means of penetration.</li>\n<li>Attackers will go after the <strong>weakest link</strong>, not the <strong>most obvious link</strong> nor the most convinient link to fortify.</li>\n</ul>\n<p>Given that the attacker won't attack the obvious things, we must learn how to <strong>think like an attacker</strong> and protect weak links.</p>\n<p>Principle of <strong>Adequate Protection</strong>:</p>\n<ul>\n<li>Security <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span></span></span></span> Economics: Digital assets should be protected to a degree consistent with their value and only until they lose their value.</li>\n</ul>","frontmatter":{"title":"Principles of Computer Security","date":"2019-09-09","description":""},"fields":{"slug":"/cpsc525/lec1","category":"cpsc525"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"cpsc525"}}}