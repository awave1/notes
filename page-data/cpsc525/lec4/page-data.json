{"componentChunkName":"component---src-templates-post-template-js","path":"/cpsc525/lec4","webpackCompilationHash":"524ce0ca932ed65a45da","result":{"data":{"markdownRemark":{"html":"<h2>Manipulating execution flow</h2>\n<!-- ```c\nvoid foo(char *str) {\n  char buffer[4];\n  strcpy(buffer, str);\n}\nvoid main() {\n  char str[128];\n  int i;\n  for (i = 0; i < 128; ++i)\n    str[i] = 'a';\n  foo(str);\n}\n``` -->\n<p><strong>Attacker's goal</strong>: exploit a buffer overflow fault to overwrite return address on stack. When function call returns, <strong>control will be directed to instruction of attacker's choosing</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// overflow2.c</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> buffer <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// address of `buffer` on the stack + 24</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// pointer, follow the pointer</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>\"Smashing the Stack\"</h2>\n<p>The process of manipulating the flow of execution is sometimes called \"stack smashing\".</p>\n<ol>\n<li>Find buffer overflow flaw</li>\n<li>smash the stack</li>\n<li>Spawn a shell == run arbitrary commands</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Spawning a shell</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"September 16, 2019","title":"Principles of Computer Security","tags":["cpsc525"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"fields":{"slug":"/cpsc525/lec3"},"frontmatter":{"published":true,"tags":["cpsc571"]}},"slug":"/cpsc525/lec4","next":{"fields":{"slug":"/btma321/lec2"},"frontmatter":{"published":true,"tags":["btma321"]}},"category":"cpsc525"}}}