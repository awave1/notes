{"componentChunkName":"component---src-templates-post-template-js","path":"/cpsc525/lec4","webpackCompilationHash":"76876c01d0eee1c01a4b","result":{"data":{"markdownRemark":{"html":"<h2>Manipulating execution flow</h2>\n<!-- ```c\nvoid foo(char *str) {\n  char buffer[4];\n  strcpy(buffer, str);\n}\nvoid main() {\n  char str[128];\n  int i;\n  for (i = 0; i < 128; ++i)\n    str[i] = 'a';\n  foo(str);\n}\n``` -->\n<p><strong>Attacker's goal</strong>: exploit a buffer overflow fault to overwrite return address on stack. When function call returns, <strong>control will be directed to instruction of attacker's choosing</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// overflow2.c</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> buffer <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// address of `buffer` on the stack + 24</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// pointer, follow the pointer</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>\"Smashing the Stack\"</h2>\n<p>The process of manipulating the flow of execution is sometimes called \"stack smashing\".</p>\n<ol>\n<li>Find buffer overflow flaw</li>\n<li>smash the stack</li>\n<li>Spawn a shell == run arbitrary commands</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Spawning a shell</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Exploiting a real program</h2>\n<p>It's trivial to execute the above attack if we control the source code. However, if we don't control the source code, how do we find the return address on the stack? (which is dependent and based on CPU, OS, compiler flags, etc.)</p>\n<ul>\n<li>\n<p>Where do we locate code to spawn a shell?</p>\n<ul>\n<li>write it into a buffer we're overflowing</li>\n<li>exploit it to an environment variable</li>\n<li>pass it to the program via <code class=\"language-text\">argv</code></li>\n</ul>\n</li>\n<li>\n<p>How do we find the return address on the stack?</p>\n<ul>\n<li>trial and error</li>\n<li>debugger / disassembler</li>\n<li>repeat return address many times, hope for the best</li>\n</ul>\n</li>\n</ul>\n<h3>NOPs</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add 1 to i; discard result</span>\n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// NULL statement</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// empty block</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// NOP 100 times</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOP 100 times</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cannonical NOP in C</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nop <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x90\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x86 NOP</span></code></pre></div>\n<p>If we don't know the exact address of shellcode, we can use <strong>NOP sled</strong>; that is, pad the start of the shellcode with a bunch of NOPs. If we return to <em>any</em> address in the sequesce of NOPs, execution flow will slide into the shellcode.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> pwd<span class=\"token punctuation\">[</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"passw0rd\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"match\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Off-by-one faults</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">v</code></pre></div>\n<p>The frame pointer overwrite (paper)</p>\n<h2>Exploiting buffer overflows in the wild</h2>\n<p>How do you find buffer overflows? Only if it's available, examine the source code. Otherwise, disassemble binary, perform fuzz testing. When fuzz testing:</p>\n<ul>\n<li>send malformed inputs (e.g. ending in unexpected characters, like <code class=\"language-text\">&quot;$$$$&quot;</code>)</li>\n<li>wait for program to crash</li>\n<li>search core dump for input characters (<code class=\"language-text\">&quot;$$$$&quot;</code>).</li>\n</ul>","frontmatter":{"date":"September 16, 2019","title":"Principles of Computer Security","tags":["cpsc525"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"fields":{"slug":"/cpsc525/lec3"},"frontmatter":{"published":true,"tags":["cpsc571"]}},"slug":"/cpsc525/lec4","next":{"fields":{"slug":"/btma321/lec2"},"frontmatter":{"published":true,"tags":["btma321"]}},"category":"cpsc525"}}}