{"componentChunkName":"component---src-templates-post-template-js","path":"/cpsc525/lec3","webpackCompilationHash":"99cdea544f97ead94d5a","result":{"data":{"markdownRemark":{"html":"<h2>Buffer overread</h2>\n<p>The following code illustrates how improperly written code can be exploited. <code class=\"language-text\">buffer</code> array can only accept 16 characters, therefore if passed more than 16, the code will print information from memory from outside of assigned stack frame. This is called <strong>buffer overread</strong> flaw.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Heartbleed (April 2014)</h4>\n<p>\"Heartbleed\" was a fault in OpenSSL versions released from 2012-2014. TLS Heartbeat mechanism prevents SSL/TLS timeouts when no data is being transmitted. One peer sends <strong>random data + payload length</strong>; other peer responds with identical payload.</p>\n<p>Code was missing a <strong>bounds check</strong>, therefore an attacker can request up to 64KB from server's private memory space.</p>\n<!--TODO: Finish heartbleed-->\n<hr>\n<h4>Apple's <code class=\"language-text\">goto fail;</code> (February 2014)</h4>\n<p>Fault in code used by OSX 10.9, iOS 6.1, to check validity of the signature key used by a server in a TLS</p>\n<!--TODO: Finish apple goto-->\n<h2>Buffer Overflows</h2>\n<p>Buffer overflows is among most commonly exploited security flaws</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> BUFF_LEN 1024</span>\n<span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>BUFF_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or gets(buffer)</span></code></pre></div>\n<p>The <code class=\"language-text\">strcpy</code> (or <code class=\"language-text\">gets</code>) don't check whether the string they're copying actually fits in buffer. Some languages (e.g. Java) would throw an exception and crash the program. Not C/C++ - these languages don't notice something bad happened.</p>","frontmatter":{"date":"September 13, 2019","title":"Principles of Computer Security","tags":["cpsc571"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"fields":{"slug":"/cpsc571/database-design"},"frontmatter":{"published":true,"tags":["cpsc571"]}},"slug":"/cpsc525/lec3","next":{"fields":{"slug":"/cpsc525/lec4"},"frontmatter":{"published":true,"tags":["cpsc525"]}},"category":"cpsc525"}}}