{"componentChunkName":"component---src-templates-post-template-js","path":"/wasm-wat","result":{"data":{"markdownRemark":{"html":"<p>WebAssembly can be represented in intermediate, human readable <strong>text format</strong>.\nThis form is designed to be exposed in text editors and essentially human readable, unlike actual WebAssembly binary output.</p>\n<h2>S-expressions</h2>\n<p>S-expression, \"symbolic expression\", or <code class=\"language-text\">sexpr</code>, <code class=\"language-text\">sexp</code> is a notation for tree representations.</p>\n<p>In S-expression, each node in the tree goes inside a pair of parenthesis - <code class=\"language-text\">(...)</code>.\nFirst label inside the parenthesis indicates what type of node it is and after there's a space separated list of attributes or child nodes.</p>\n<p>WebAssembly S-expression would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span> <span class=\"token punctuation\">(</span><span class=\"token car\">memory</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Which represents a <strong>tree</strong> with a <strong>root</strong> node <code class=\"language-text\">module</code> and two child nodes, a <code class=\"language-text\">memory</code> node with the attribute <code class=\"language-text\">1</code> and a <code class=\"language-text\">func</code> node.</p>\n<h3>Simplest Module</h3>\n<p>The simplest possible module is</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It is empty, but <strong>still a valid module</strong>.</p>\n<h3>Functionality in the module</h3>\n<p>All code in WebAssembly module is grouped into functions, which have the following code structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">func</span> &lt;signature> &lt;local vars> &lt;body><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Where:</p>\n<ul>\n<li>The <strong>signature</strong> declares what are the function parameters and its return value</li>\n<li>The <strong>local vars</strong> are local variables for the function with explicit types</li>\n<li>The <strong>body</strong> is linear list of low-level instructions</li>\n</ul>\n<h2>Signatures and parameters</h2>\n<p>The signature is a sequence of parameter type declarations followed by a list of return type declarations.\nNote, that the absence of a <code class=\"language-text\">(result)</code> means the function does <strong>not</strong> return anything.</p>\n<p>Since each parameter has explicit type declaration, <code class=\"language-text\">wasm</code> currently provides the following four types:</p>\n<ul>\n<li><code class=\"language-text\">i32</code>: 32 integer</li>\n<li><code class=\"language-text\">i64</code>: 64 integer</li>\n<li><code class=\"language-text\">f32</code>: 32 float</li>\n<li><code class=\"language-text\">f64</code>: 64 float</li>\n</ul>\n<p>A single parameter is written <code class=\"language-text\">(param i32)</code> and the return type is written <code class=\"language-text\">(result i32)</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">result</span> f64<span class=\"token punctuation\">)</span> ...<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This function takes two 32-bit integers and returns a 64-bit float. After the signature, local variables are listed with their type, like <code class=\"language-text\">(local i32)</code>.\nParameters are just like locals except they are initialized with the value passed by the caller.</p>\n<h2>Getting and setting local parameters</h2>\n<p>Local variables/parameters can be read and written by the body of the function with <code class=\"language-text\">local.get</code> and <code class=\"language-text\">local.set</code> instructions.\nThese instructions refer to the item by its numeric index:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> f32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">local</span> f64<span class=\"token punctuation\">)</span>\n  local.get <span class=\"token number\">0</span>\n  local.get <span class=\"token number\">1</span>\n  local.get <span class=\"token number\">2</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Therefore, <code class=\"language-text\">local.get 0</code> would get <code class=\"language-text\">param i32</code>, <code class=\"language-text\">local.get 1</code> gets <code class=\"language-text\">param f32</code> and etc.</p>\n<p>Numeric addresses can be replaced with labels:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $p1 i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $p2 f32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">local</span> $l1 f64<span class=\"token punctuation\">)</span>\n  local.get $p1\n  local.get $p2\n  local.get $l1\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Stack machines</h2>\n<p>wasm execution is defined in terms of <strong>stack machine</strong>, where the basic idea is that every type of instruction pushes and/or pops a certain number of defined type to/from a stack.\nFor example, <code class=\"language-text\">local.get</code> is defined to push the value of the local it read onto the stack, and <code class=\"language-text\">i32.add</code> pops two <code class=\"language-text\">i32</code> values (it implicitly grabs the previous two values pushed onto the stack), computes their sum (modulo <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>) and pushes the resulting <code class=\"language-text\">i32</code> value.</p>\n<p>When a function is called, it starts with an empty stack which is gradually filled up and emptied as the body's instructions are executed. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $p i32<span class=\"token punctuation\">)</span>\n  local.get $p\n  local.get $p\n  i32.add\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The stack would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Before add:\n[-----top-----]\n[      $p     ]\n[      $p     ]\n[----bottom---]\n\nAfter add:\n[-----top-----]\n[   $p + $p   ]\n[----bottom---]</code></pre></div>\n<p>The WebAssembly validation rules ensure the stack matches exaclty. So declaring <code class=\"language-text\">(result f32)</code> will require you to have exactly one <code class=\"language-text\">f32</code> at the end. So, if there's no result, the resulting stack would be empty.</p>\n<h2>Function body</h2>\n<p>Function body is a list of instruction that are followed as the function is called. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $lhs i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $rhs i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">result</span> i32<span class=\"token punctuation\">)</span>\n    local.get $lhs\n    local.get $rhs\n    i32.add\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The function gets two parameters, adds them together and returns the result.</p>\n<p>Full list of opcodes available at <a href=\"https://webassembly.github.io/spec/core/exec/index.html\">execution spec page</a>.</p>\n<h3>Calling the function</h3>\n<p>Like in ES module, wasm functions must be <code class=\"language-text\">export</code>ed. Like local vars, functions are identified by an index by default, but can use labels:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">func</span> $add ...<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Adding export:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">export</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> $add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here, <code class=\"language-text\">add</code> is the name of the function that can be accessed in JavaScript and <code class=\"language-text\">$add</code> picks out which WebAssembly function inside the module is being <code class=\"language-text\">export</code>ed.</p>\n<p>Final module:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> $add <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $lhs i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> $rhs i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">result</span> i32<span class=\"token punctuation\">)</span>\n    local.get $lhs\n    local.get $rhs\n    i32.add\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token car\">export</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> $add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Exploring fundamentals</h2>\n<p>This section covers more advanced features of wasm text format.</p>\n<h3>Calling functions from other functions in the same module</h3>\n<p>The <code class=\"language-text\">call</code> instruction calls a single function, given an index or a name.\nFor example, the following module contains two functions - one returns <code class=\"language-text\">42</code>, the other returns result + 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> $getAns <span class=\"token punctuation\">(</span><span class=\"token car\">result</span> i32<span class=\"token punctuation\">)</span>\n    i32.const <span class=\"token number\">42</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">export</span> <span class=\"token string\">\"getAnswerPlus1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">result</span> $i32<span class=\"token punctuation\">)</span>\n    call $getAns\n    i32.const <span class=\"token number\">1</span>\n    i32.add\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">i32.const</code> defines a constant value and pushes it onto the stack.</p>\n<p>In order to call the code in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">getAnswerPlus1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Importing functions (from JavaScript)</h3>\n<p>In previous section, we called WebAssembly function <em>from</em> JavaScript.\nNow we're going to import JavaScript function <em>into</em> WebAssembly module.</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">import</span> <span class=\"token string\">\"console\"</span> <span class=\"token string\">\"log\"</span> <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> $log <span class=\"token punctuation\">(</span><span class=\"token car\">param</span> i32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">export</span> <span class=\"token string\">\"logIt\"</span><span class=\"token punctuation\">)</span>\n    i32.const <span class=\"token number\">13</span>\n    call $log\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We're asking to import the <code class=\"language-text\">log</code> function from <code class=\"language-text\">console</code> module.\nExported <code class=\"language-text\">logIt</code> function calls imported function using <code class=\"language-text\">call</code> instruction.</p>\n<p>Imported functions are just like regular wasm functions, they have a signature that WebAssembly validation checks <strong>statically</strong>, and they are given an index and can be named and called.</p>\n<p>We can also pass any JavaScript to our wasm module. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">log</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logger.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span> <span class=\"token operator\">=></span> o<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">logIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>WebAssembly globals</h3>\n<p>WebAssembly has the ability to create global variable instances, accessible from both JavaScript and importable/exportable across one or more <code class=\"language-text\">WebAssembly.Module</code> instances.\nThis allows <strong>dynamil linking</strong> of multiple modules.</p>\n<p>In <code class=\"language-text\">wat</code>, it would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">global</span> $g <span class=\"token punctuation\">(</span><span class=\"token car\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">mut</span> i32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">export</span> <span class=\"token string\">\"getGlobal\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">result</span> i32<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">global</span>.get $g<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token car\">func</span> <span class=\"token punctuation\">(</span><span class=\"token car\">export</span> <span class=\"token string\">\"incGlobal\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">global</span>.set $g\n      <span class=\"token punctuation\">(</span><span class=\"token car\">i32</span>.add <span class=\"token punctuation\">(</span><span class=\"token car\">global</span>.get $g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">i32</span>.const <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We specify a global value using <code class=\"language-text\">global</code> keyword and using <code class=\"language-text\">mut</code> to specify that value is mutable.</p>\n<p>Equivalent JavaScript expression:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> global <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'i32'</span><span class=\"token punctuation\">,</span>\n  mutable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>WebAssembly Memory</h3>\n<h3>WebAssembly Tables</h3>","frontmatter":{"date":"January 14, 2020","title":"WebAssembly Text Format","tags":["wasm"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"fields":{"slug":"/options/chin317/geo-population"},"frontmatter":{"published":true,"tags":["options/chin317"]}},"slug":"/wasm-wat","next":null,"category":"wasm-wat"}}}