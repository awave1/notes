{"version":3,"sources":["webpack:///./src/components/Bio.js","webpack:///./src/components/TagList.js","webpack:///./src/templates/PostTemplate.js","webpack:///./src/utils/utils.js"],"names":["BioWrapper","styled","div","withConfig","displayName","componentId","Avatar","Image","rhythm","BioText","bioQuery","Bio","props","react_default","a","createElement","gatsby_browser_entry","query","render","data","_data$site$siteMetada","site","siteMetadata","author","social","fixed","avatar","childImageSharp","alt","style","marginBottom","href","twitter","_2222508901","List","ul","Tag","li","theme","tag","background","hover","TagList","_ref","icon","tags","length","index_es","faTags","faTag","display","alignItems","margin","map","name","i","key","to","leKebab","__webpack_require__","d","__webpack_exports__","pageQuery","GITHUB_USER","GITHUB_REPO","CONTENT_ROOT","EditContainer","PagingContainer","PageLink","Link","Page","css","left","right","children","PostHeader","Container","title","date","readingTime","components_TagList","Template","_props$data$markdownR","markdownRemark","_props$data$markdownR2","frontmatter","html","_props$pageContext","pageContext","slug","prev","next","editUrl","getReadingTime","PostTemplate_PostHeader","className","dangerouslySetInnerHTML","__html","PostTemplate_Page","fields","faGithub","marginLeft","components_Bio","simple","countWords","match","replace","count","charCodeAt","countImages","module","exports","str","_contentCount","wordCount","imageCount","contentCount","readingTimeSeconds","Math","max","round","estimatedReadingTime","flatten","arr","concat","apply","unique","filter","el","array","indexOf"],"mappings":"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","file":"component---src-templates-post-template-js-9dd3367cc86f12f3a008.js","sourcesContent":["import React from 'react';\r\nimport { StaticQuery, graphql } from 'gatsby';\r\nimport Image from 'gatsby-image';\r\nimport styled from 'styled-components';\r\nimport { rhythm } from '../utils/Typography';\r\n\r\nconst BioWrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Avatar = styled(Image)`\r\n  margin-right: ${rhythm(1 / 2)};\r\n  margin-bottom: 0;\r\n  min-width: 60;\r\n  border-radius: 100%;\r\n  box-shadow: 0px 0px 25px #0000004d;\r\n\r\n  @media screen and (max-width: 310px) {\r\n    display: none !important;\r\n  }\r\n`;\r\n\r\nconst BioText = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction Bio(props) {\r\n  return (\r\n    <StaticQuery\r\n      query={bioQuery}\r\n      render={data => {\r\n        const { author, social } = data.site.siteMetadata;\r\n        return (\r\n          <BioWrapper>\r\n            <Avatar fixed={data.avatar.childImageSharp.fixed} alt={author} />\r\n            <BioText>\r\n              <p style={{ marginBottom: 0 }}>\r\n                Written by <strong>{author}</strong>.{` `}\r\n              </p>\r\n              <p>\r\n                <a href={`https://twitter.com/${social.twitter}`}>\r\n                  @awaveawave\r\n                </a>\r\n              </p>\r\n            </BioText>\r\n          </BioWrapper>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nconst bioQuery = graphql`\r\n  query BioQuery {\r\n    avatar: file(absolutePath: { regex: \"/profile_pic.jpg/\" }) {\r\n      childImageSharp {\r\n        fixed(width: 60, height: 60) {\r\n          ...GatsbyImageSharpFixed\r\n        }\r\n      }\r\n    }\r\n    site {\r\n      siteMetadata {\r\n        author\r\n        social {\r\n          twitter\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Bio;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTags, faTag } from '@fortawesome/free-solid-svg-icons';\r\nimport { leKebab } from '../utils/utils';\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  list-style: none;\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Tag = styled.li`\r\n  margin: 0 5px;\r\n  padding: 3px 10px;\r\n  font-size: 0.9em;\r\n  background: ${props => props.theme.tag.background};\r\n  font-family: Hack, monospace;\r\n  border-radius: 5px;\r\n  transition: all 150ms cubic-bezier(0.55, 0, 0.1, 1);\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: ${props => props.theme.tag.hover.background};\r\n  }\r\n\r\n  @media screen and (max-width: 600px) {\r\n    margin: 5px 2px;\r\n  }\r\n`;\r\n\r\nconst TagList = ({ tags }) => {\r\n  let icon;\r\n\r\n  if (tags && tags.length > 0) {\r\n    icon =\r\n      tags.length > 1 ? (\r\n        <FontAwesomeIcon icon={faTags} />\r\n      ) : (\r\n        <FontAwesomeIcon icon={faTag} />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center', margin: '10px 0' }}>\r\n      {icon}\r\n      <List>\r\n        {tags.map((name, i) => (\r\n          <Tag key={i}>\r\n            <Link to={`/tags/${leKebab(name)}`}>{name}</Link>\r\n          </Tag>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagList;\r\n","import React from 'react';\r\nimport { graphql, Link } from 'gatsby';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport styled from 'styled-components';\r\nimport Bio from '../components/Bio';\r\nimport TagList from '../components/TagList';\r\nimport { getReadingTime } from '../utils/utils';\r\n\r\nimport 'katex/dist/katex.min.css';\r\n\r\nconst GITHUB_USER = 'awave1';\r\nconst GITHUB_REPO = 'notes';\r\nconst CONTENT_ROOT = 'content';\r\n\r\nconst EditContainer = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  font-family: Hack, monospace;\r\n  margin: 1.5rem 0;\r\n  font-weight: bold;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst PagingContainer = styled.ul`\r\n  display: flex;\r\n  list-style: none;\r\n  margin: 1.5rem 0;\r\n`;\r\n\r\nconst PageLink = styled(Link)`\r\n  font-family: Hack, monospace;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  @media screen and (max-width: 426px) {\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nconst Page = props => {\r\n  const css = {\r\n    margin: `0 ${props.left ? 'auto' : '0'} 0 ${props.right ? 'auto' : '0'}`,\r\n  };\r\n\r\n  return (\r\n    <li style={css}>\r\n      <PageLink to={props.to}>{props.children}</PageLink>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst PostHeader = props => {\r\n  const Container = styled.div`\r\n    margin: 1rem 0;\r\n\r\n    h1 {\r\n      margin: 0;\r\n    }\r\n  `;\r\n\r\n  return (\r\n    <Container>\r\n      <h1>{props.title}</h1>\r\n      <small>\r\n        {props.date} | {props.readingTime}\r\n      </small>\r\n      <TagList tags={props.tags} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nfunction Template(props) {\r\n  const {\r\n    markdownRemark: {\r\n      frontmatter: { title, date, tags },\r\n      html,\r\n    },\r\n  } = props.data;\r\n  const { slug, prev, next } = props.pageContext;\r\n\r\n  const editUrl = `https://github.com/${GITHUB_USER}/${GITHUB_REPO}/edit/master/src/${CONTENT_ROOT}${slug}.md`;\r\n  const readingTime = getReadingTime(html);\r\n\r\n  return (\r\n    <article>\r\n      <PostHeader\r\n        title={title}\r\n        date={date}\r\n        tags={tags}\r\n        readingTime={readingTime}\r\n      />\r\n      <div\r\n        className=\"blog-post-content\"\r\n        dangerouslySetInnerHTML={{ __html: html }}\r\n      />\r\n      <PagingContainer>\r\n        {prev && (\r\n          <Page to={prev.fields.slug} left>\r\n            {' '}\r\n            ￩ {prev.fields.slug}\r\n          </Page>\r\n        )}\r\n        {next && (\r\n          <Page to={next.fields.slug} right>\r\n            {next.fields.slug} ￫{' '}\r\n          </Page>\r\n        )}\r\n      </PagingContainer>\r\n      <EditContainer href={editUrl}>\r\n        <FontAwesomeIcon icon={faGithub} />{' '}\r\n        <span style={{ marginLeft: '10px' }}>editOnGithub();</span>\r\n      </EditContainer>\r\n      <Bio simple />\r\n    </article>\r\n  );\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        title\r\n        tags\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Template;\r\n","/**\r\n * Format string to-kebab-format\r\n *\r\n * @param {string} str\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of images\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst leKebab = str => str.replace(/[^A-Za-z0-9\\s]+/g, '').replace(/\\s/g, '-');\r\n\r\n/**\r\n * Word count utility\r\n *\r\n * @param {string} html string\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of words after sanitizing any html\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst countWords = html => {\r\n  const text = html.replace(/<(.|\\n)*?>/g, ' '); // strip any HTML tags\r\n\r\n  const pattern = /[a-zA-ZÀ-ÿ0-9_\\u0392-\\u03c9\\u0410-\\u04F9]+|[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g;\r\n  const match = text.match(pattern);\r\n  let count = 0;\r\n\r\n  if (match === null) {\r\n    return count;\r\n  }\r\n\r\n  for (let i = 0; i < match.length; i++) {\r\n    if (match[i].charCodeAt(0) >= 0x4e00) {\r\n      count += match[i].length;\r\n    } else {\r\n      count += 1;\r\n    }\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\n/**\r\n * Image count utility\r\n *\r\n * @param {string} html string\r\n * @returns {integer} word count\r\n * @description Takes a html string and returns the number of images\r\n * Note: This code is taken from @tryghost/helpers package\r\n **/\r\nconst countImages = html => (html.match(/<img(.|\\n)*?>/g) || []).length;\r\n\r\nconst contentCount = html => ({\r\n  wordCount: countWords(html),\r\n  imageCount: countImages(html),\r\n});\r\n\r\n/**\r\n * Estimated reading time (based on medium https://blog.medium.com/read-time-and-you-bc2048ab620c)\r\n *\r\n * @param {integer} wordCount\r\n * @param {integer} imageCount\r\n * @returns {integer} estimated reading time in seconds\r\n **/\r\nconst estimatedReadingTime = (wordCount, imageCount) => {\r\n  const wordsPerMinute = 275;\r\n  const wordsPerSecond = wordsPerMinute / 60;\r\n  let readingTimeSeconds = wordCount / wordsPerSecond;\r\n\r\n  if (imageCount) {\r\n    for (let i = 12; i > 12 - imageCount; i--) {\r\n      readingTimeSeconds += Math.max(i, 3);\r\n    }\r\n  }\r\n\r\n  const readingTimeMinutes = Math.round(readingTimeSeconds / 60);\r\n\r\n  return readingTimeMinutes;\r\n};\r\n\r\nconst getReadingTime = html => {\r\n  const { wordCount, imageCount } = contentCount(html);\r\n  const readingTime = estimatedReadingTime(wordCount, imageCount);\r\n\r\n  return readingTime <= 1 ? '1 min read' : `${readingTime} min read`;\r\n};\r\n\r\nconst flatten = arr => [].concat.apply([], arr);\r\n\r\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\r\n\r\nmodule.exports = {\r\n  leKebab,\r\n  getReadingTime,\r\n  flatten,\r\n  unique,\r\n};\r\n"],"sourceRoot":""}